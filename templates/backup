
class StopWatch {
    constructor(time) {
        this.time = typeof time !== 'undefined' ? time : 0;
        
        this.running = 0;
        this.mins = 0;
        this.secs = 0;

        this.outputTime = stopWatchTime;
        this.btnStartStop = stopWatchBtnStartStop;
        this.btnReset = stopWatchBtnReset;

        this.btnStartStop.addEventListener('click', () => this.startStop());
        this.btnReset.addEventListener('click', () => this.reset());
    }
    startStop() {
        if(this.running == 0) {
            this.running = 1;
            this.increment();
            this.btnStartStop.innerHTML = 'Stop';
        } else {
            this.running = 0;
            this.btnStartStop.innerHTML = 'Resume';
        }
    }

    increment() {
        if(this.running == 1) {
            setTimeout(() => {
                this.time ++;
                this.mins = Math.floor(this.time/60);
                this.secs = Math.floor(this.time) % 60;

                if(this.mins < 10) {
                    this.mins = '0' + this.mins;
                }
                if(this.secs < 10) {
                    this.secs = '0' + this.secs;
                }

                this.outputTime.innerHTML = this.mins + ':' + this.secs;
                this.increment();
            }, 1000);
        };
    }
    reset() {
        this.running = 0;
        this.time = 0;
        this.btnStartStop.innerHTML = 'Start';
        this.outputTime.innerHTML = '00:00';
    }
}


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- <link rel="stylesheet" href="assets/css/style.css" media="all"> -->

  <!--<script src="assets/js/sublineMenuBar.js"></script> -->

</head>
<style>
    * {
        margin: 0;
        padding: 0;
        color: white;
        background: black;
        border-color: black;
    }
    #content {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
    }
    .content__wrapper {
        display: flex;
        flex-direction: column;
        width: 48%;
        height: 100%;
    }
    .currentOutput {
        position: relative;
        font-size: 350px;
        vertical-align: center;
        padding-left: 2.5%;
    }
    .controls {
        display: flex;
        flex-direction: row;
        width: 100%;
        justify-content: space-around;
    }
    .headline {
        position: sticky;
        font-size: 100px;
        text-align: center;
    }
    /*stopWatch*/
    #outputStopwatch {
        width: 100%;
        height: auto;
    }
    .stopWatchBtn {
        width: 40%;
        height: 40px;
        background:orangered;
    }
    .headline__stopWatch {
        margin-top: 130px;
    }
    /*world time*/
    #worldTime {
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
    }

</style>
<body id="content">

    <section class="Stopwatch content__wrapper">
        <p id="outputStopwatch" class="currentOutput"></p>
        <div class="controls">
            <button class="stopWatchBtn" id="startStop">Start</button>
            <button class="stopWatchBtn" id="reset">Reset</button>
        </div>
        <h2 class="headline headline__stopWatch">Stopwatch</h2>
    </section>  


<script>
/*define here where you want to use the buttons and where the time should be printed*/
var stopWatchTime = document.getElementById('outputStopwatch'); 
var stopWatchBtnStartStop = document.getElementById('startStop'); 
var stopWatchBtnReset = document.getElementById('reset'); 
</script>
<script src="../js/stopWatch.js"></script>
<script>
/*you can give the StopWatch a Parameter to set at which time it should be started (in secs)*/
var stopWatch = new StopWatch(0);
</script>

</body>
</html>

